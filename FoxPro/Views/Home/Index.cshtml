@model FoxPro.DTOs.TaskDto


<!-- Task Modal -->
<div class="modal fade" id="taskModal" tabindex="-1" role="dialog" aria-labelledby="taskModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="taskModalLabel">Task Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="closeModal()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="taskForm">
                    <input asp-for="Id" type="hidden"/>
                    <div class="form-group">
                        <label asp-for="Contents"></label>
                        <input type="text" class="form-control" asp-for="Contents" required />
                        <span asp-validation-for="Contents"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Filename">File Name</label>
                        <input type="file" class="form-control" asp-for="Filename" />
                    </div>
                    <div class="form-group">
                        <label asp-for="DueDate">File Name</label>
                        <input class="form-control" asp-for="DueDate" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="closeModal()">Close</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" id="SaveButton">Save Task</button>
            </div>
        </div>
    </div>
</div>

<section>
    <div id="taskContextMenu" class="context-menu">
        <ul>
            <li id="openTask">Open Task</li>
            <li id="editTask">Edit Task</li>
            <li id="printTask">Print Task</li>
            <li id="deleteTask">Delete Task</li>
        </ul>
    </div>

    <div class="container mt-3">
        <h2>Task List</h2>
        <button class="btn btn-primary mb-3" data-toggle="modal" data-target="#taskModal">Add Task</button>
        <!-- Placeholder for Task Display -->
        <div class="container mt-2">
            <table id="taskDataTable" class="display">
                <thead>
                    <tr>
                        <th>Priority</th>
                        <th>Compelete</th>
                        <th>User Icon</th>
                        <th>Task Name</th>
                        <th>File Name</th>
                        <th>Due Date</th>
                        <th>Edit/Delete</th>
                    </tr>
                </thead>
                <tbody id="taskTable">
                    <!-- Tasks will be added here dynamically -->
                    @foreach(var item in Model.Tasks) {

                        string className = @item.Status == 1 ? "strikeout" : "";

                        <tr class="@className" data-taskId="@item.Id">
                            <td>
                                <i class="fa fa-long-arrow-down text-primary" aria-hidden="true"></i>
                            </td>
                            <td>
                                <input type="checkbox" checked="@(item.Status == 1)" class="checkbox-class" />
                            </td>
                            <td>
                                <i class="fa fa-user-o text-danger" aria-hidden="true"></i>
                            </td>
                            <td>
                                @item.Contents
                            </td>
                            <td>
                                @item.Filename
                            </td>
                            <td>
                                @item.DueDate.ToString("yyyy-MM-dd")
                            </td>
                            <td>
                                <button class="btn btn-info" id="edit-task">Edit</button>
                                <button class="btn btn-danger" id="delete-task">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</section>

@section Scripts{
    <script>
        function closeModal(){
            $('#taskModal').modal('hide');
        }

        $(document).ready(function () {
            var table = $('#taskDataTable').DataTable();

            function saveTask() {
                var formData = new FormData($('#taskForm')[0]);
                var jsonData = {};
                debugger;
                // Iterate over all form data entries
                formData.forEach(function (value, key) {
                    if (key === "Filename") {
                        // If the field is 'Filename', grab the file name only
                        if (value instanceof File) {
                            jsonData[key] = value.name;  // Store the file's name, not the file itself
                        }
                    } else {
                        jsonData[key] = value;
                    }
                });

                // Convert JSON object to a JSON string to log it
                // Set up the fetch options for a POST request
                const fetchOptions = {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(jsonData)
                };

                // Perform the fetch request to the specified endpoint

                const id = $('Id').val();
                let endpint = ''
                if(!id){
                    endpint = '/Home/AddTask';
                }else{
                    endpint = '/Home/UpdateTask';
                }

                fetch(endpint,fetchOptions)
                    .then(response => {
                        location.reload();
                    })  // Convert the response to JSON
                    .catch(error => console.error('Error:', error));  // Handle any errors
            }

            function deleteTask(button) {
                if (confirm('Are you sure you want to delete this task?')) {
                    var row = table.row($(button).parents('tr'));
                    row.remove().draw();
                }
            }

            $('#SaveButton').on('click', saveTask);

            $(document).on('click', '#edit-task', function () {
                var button = $(this);  // Use jQuery wrapper for consistency
                var rowElement = button.closest('tr');  // Get the closest parent <tr>
                var taskId = rowElement.data('taskid');  // Retrieve the data-taskId attribute value
                var row = table.row(rowElement);  // Get the DataTables row object
                var rowData = row.data();  // Get the row data

                console.log(row);  // Debugging: log the DataTables row object
                console.log(taskId);  // Debugging: log the task ID
                $('#Contents').val(rowData[3]);  // Set values from rowData
                // $('#Filename').val(rowData[4]);  // Assuming this is commented out because the input might not accept a filename directly
                $('#DueDate').val(rowData[5]);
                $('#Id').val(taskId);
                $('#taskModal').modal('show');  // Show the modal
            });


            $(document).on('click', '#delete-task', function () {
                if (confirm('Are you sure you want to delete this task?')) {
                    var row = table.row($(this).parents('tr'));
                    const taskId = $(this).closest('tr').data('taskid');
                    if (taskId) {
                        const endpoint = `/Home/DeleteTask?taskId=${encodeURIComponent(taskId)}`; // Include the taskId in the query string
                        const options = {
                            method: 'DELETE',  // Set method to DELETE
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        };

                        fetch(endpoint, options)
                            .then(response => {
                                location.reload();  
                            })
                            .catch(error => {
                                console.error('Error:', error);  // Error handling
                            });
                    }
                }
            });


            $(document).on('change', '#check-input', function () {
                const checkbox = $(this);
                const isChecked = checkbox.prop('checked');
                const tr = checkbox.closest('tr');
                if(isChecked){
                    tr.addClass('strikeout');
                    tr.addClass('text-muted');
                }else{
                    tr.removeClass('strikeout');
                    tr.removeClass('text-muted');
                }
            });

            function checkboxHandler(){
                const tr = $(this).closest('tr');
                const id = tr.data('taskid');
                const options = {
                    method: 'post',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ id: id })
                }
                const endpoint = '/Home/UpdateStatus'
                fetch(endpoint,options)
                .then((res) => {
                     location.reload();
                }).catch((err)=>{
                    console.log(err);
                });
            };

            $('.checkbox-class').on('change', checkboxHandler);

            $('#taskDataTable tbody').on("contextmenu", "tr", function (e) {
                e.preventDefault(); 
                const tr = $(this);
                const trC = $(this)[0].children;
                console.log(tr);
                $('#taskContextMenu').css({
                    display: "block", 
                    left: e.pageX + 'px', 
                    top: e.pageY + 'px' 
                });
            });

            // Task operations through context menu
            $('#openTask').click(function () { alert('Open Task clicked'); });
            $('#editTask').click(function () { alert('Edit Task clicked'); });
            $('#printTask').click(function () { alert('Print Task clicked'); });
            $('#deleteTask').click(function () {
                if (confirm('Are you sure you want to delete this task?')) {
                    alert('Task deleted');
                }
            });

            $(document).on("click", function () {
                $('#taskContextMenu').hide();
            });
        });
    </script>
}


